#!/usr/bin/env bash
set -euo pipefail

# ====================================================================
# SENSITIVE CONFIG-DATEIEN VERSCHL√úSSELN/ENTSCHL√úSSELN
# ====================================================================

# Import config
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MODULES_DIR="$(dirname "$SCRIPT_DIR")/modules"
source "$MODULES_DIR/config.sh"

# Zeige Verwendung an
usage() {
  echo "Verwendung: $0 [encrypt|decrypt] [Dateiname]"
  echo
  echo "Verschl√ºsselt oder entschl√ºsselt sensitive Konfigurationsdateien."
  echo
  echo "Befehle:"
  echo "  encrypt [Datei]  Verschl√ºsselt die angegebene Datei"
  echo "  decrypt [Datei]  Entschl√ºsselt die angegebene Datei"
  echo
  echo "Beispiele:"
  echo "  $0 encrypt /etc/website-engine/backup/ionos.env"
  echo "  $0 decrypt /etc/website-engine/backup/ionos.env.enc"
  echo
  echo "Hinweis: Wenn keine Datei angegeben wird, werden Standard-Konfigurationsdateien verwendet."
  exit 1
}

# Standardkonfigurationsdateien
DEFAULT_FILES=(
  "/etc/website-engine/credentials.env"
  "/etc/website-engine/backup/restic.env"
  "/etc/website-engine/backup/ionos.env"
  "/etc/profile.d/cloudflare.sh"
)

# Verschl√ºsselungspasswort (wird interaktiv abgefragt)
ENCRYPTION_PASSWORD=""

# Verschl√ºssele eine Datei
encrypt_file() {
  local file="$1"
  local encrypted_file="${file}.enc"
  
  if [[ ! -f "$file" ]]; then
    echo "‚ùå Fehler: Datei nicht gefunden: $file"
    return 1
  fi
  
  # Pr√ºfe, ob OpenSSL verf√ºgbar ist
  if ! command -v openssl &> /dev/null; then
    echo "‚ùå Fehler: OpenSSL ist nicht installiert."
    return 1
  fi
  
  # Passwort abfragen, wenn nicht gesetzt
  if [[ -z "$ENCRYPTION_PASSWORD" ]]; then
    echo -n "üîí Bitte Verschl√ºsselungspasswort eingeben: "
    read -r -s ENCRYPTION_PASSWORD
    echo
    
    echo -n "üîí Passwort best√§tigen: "
    read -r -s PASSWORD_CONFIRM
    echo
    
    if [[ "$ENCRYPTION_PASSWORD" != "$PASSWORD_CONFIRM" ]]; then
      echo "‚ùå Fehler: Passw√∂rter stimmen nicht √ºberein."
      return 1
    fi
  fi
  
  echo "üîí Verschl√ºssele $file nach $encrypted_file..."
  
  # Datei mit OpenSSL verschl√ºsseln
  if ! openssl enc -aes-256-cbc -salt -pbkdf2 -in "$file" -out "$encrypted_file" -pass pass:"$ENCRYPTION_PASSWORD"; then
    echo "‚ùå Fehler beim Verschl√ºsseln der Datei: $file"
    return 1
  fi
  
  echo "‚úÖ Datei erfolgreich verschl√ºsselt: $encrypted_file"
  
  # Berechtigungen setzen
  chmod 600 "$encrypted_file"
  
  # Sicherheitskopie der Originaldatei erstellen
  cp "$file" "${file}.bak"
  chmod 600 "${file}.bak"
  
  # Nachfragen, ob Originaldatei gel√∂scht werden soll
  echo -n "‚ùì Originaldatei $file l√∂schen? (j/n): "
  read -r REPLY
  if [[ "$REPLY" =~ ^[jJyY]$ ]]; then
    rm -f "$file"
    echo "‚úÖ Originaldatei gel√∂scht. Sicherheitskopie unter ${file}.bak"
  else
    echo "‚úÖ Originaldatei beibehalten. Sicherheitskopie unter ${file}.bak"
  fi
  
  return 0
}

# Entschl√ºssele eine Datei
decrypt_file() {
  local encrypted_file="$1"
  local decrypted_file="${encrypted_file%.enc}"
  
  if [[ ! -f "$encrypted_file" ]]; then
    echo "‚ùå Fehler: Verschl√ºsselte Datei nicht gefunden: $encrypted_file"
    return 1
  fi
  
  # Pr√ºfe, ob die Datei eine .enc-Erweiterung hat
  if [[ "$encrypted_file" != *.enc ]]; then
    echo "‚ö†Ô∏è Warnung: Datei hat keine .enc-Erweiterung. Fortfahren? (j/n): "
    read -r REPLY
    if [[ ! "$REPLY" =~ ^[jJyY]$ ]]; then
      echo "‚ùå Vorgang abgebrochen."
      return 1
    fi
  fi
  
  # Passwort abfragen, wenn nicht gesetzt
  if [[ -z "$ENCRYPTION_PASSWORD" ]]; then
    echo -n "üîë Bitte Entschl√ºsselungspasswort eingeben: "
    read -r -s ENCRYPTION_PASSWORD
    echo
  fi
  
  # Pr√ºfe, ob Zieldatei bereits existiert
  if [[ -f "$decrypted_file" ]]; then
    echo "‚ö†Ô∏è Warnung: Zieldatei existiert bereits: $decrypted_file"
    echo -n "‚ùì √úberschreiben? (j/n): "
    read -r REPLY
    if [[ ! "$REPLY" =~ ^[jJyY]$ ]]; then
      echo "‚ùå Vorgang abgebrochen."
      return 1
    fi
  fi
  
  echo "üîì Entschl√ºssele $encrypted_file nach $decrypted_file..."
  
  # Datei mit OpenSSL entschl√ºsseln
  if ! openssl enc -aes-256-cbc -d -salt -pbkdf2 -in "$encrypted_file" -out "$decrypted_file" -pass pass:"$ENCRYPTION_PASSWORD"; then
    echo "‚ùå Fehler beim Entschl√ºsseln der Datei: $encrypted_file"
    echo "   Falsches Passwort oder besch√§digte Datei?"
    return 1
  fi
  
  # Berechtigungen setzen
  chmod 600 "$decrypted_file"
  
  echo "‚úÖ Datei erfolgreich entschl√ºsselt: $decrypted_file"
  return 0
}

# Verschl√ºssele alle Standarddateien
encrypt_all() {
  local success=0
  local failures=0
  
  for file in "${DEFAULT_FILES[@]}"; do
    if [[ -f "$file" ]]; then
      echo "üîí Verschl√ºssele $file..."
      if encrypt_file "$file"; then
        success=$((success+1))
      else
        failures=$((failures+1))
      fi
    else
      echo "‚ö†Ô∏è Datei nicht gefunden, √ºberspringe: $file"
    fi
  done
  
  echo
  echo "üèÅ Verschl√ºsselung abgeschlossen: $success erfolgreich, $failures fehlgeschlagen"
  
  return $failures
}

# Entschl√ºssele alle Standarddateien
decrypt_all() {
  local success=0
  local failures=0
  
  for file in "${DEFAULT_FILES[@]}"; do
    local encrypted_file="${file}.enc"
    if [[ -f "$encrypted_file" ]]; then
      echo "üîì Entschl√ºssele $encrypted_file..."
      if decrypt_file "$encrypted_file"; then
        success=$((success+1))
      else
        failures=$((failures+1))
      fi
    else
      echo "‚ö†Ô∏è Verschl√ºsselte Datei nicht gefunden, √ºberspringe: $encrypted_file"
    fi
  done
  
  echo
  echo "üèÅ Entschl√ºsselung abgeschlossen: $success erfolgreich, $failures fehlgeschlagen"
  
  return $failures
}

# Parse Befehle
if [[ $# -lt 1 ]]; then
  usage
fi

case "$1" in
  encrypt)
    if [[ $# -eq 2 ]]; then
      encrypt_file "$2"
    else
      encrypt_all
    fi
    ;;
  decrypt)
    if [[ $# -eq 2 ]]; then
      decrypt_file "$2"
    else
      decrypt_all
    fi
    ;;
  --help)
    usage
    ;;
  *)
    echo "Unbekannter Befehl: $1"
    usage
    ;;
esac

exit $?